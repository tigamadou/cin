# CIN Event Management System - Makefile
# =====================================

.PHONY: help install dev prod setup migrate shell superuser logs clean restart test

# Couleurs pour les messages
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

# Configuration par d√©faut
ENV_FILE = .env
DOCKER_COMPOSE = docker compose

help: ## Afficher l'aide
	@echo "$(GREEN)CIN Event Management System$(NC)"
	@echo "================================"
	@echo ""
	@echo "$(YELLOW)Commandes disponibles:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

install: ## Installation compl√®te (d√©veloppement)
	@echo "$(GREEN)üöÄ Installation de CIN Event Management System...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(YELLOW)üìù Cr√©ation du fichier .env...$(NC)"; \
		cp env.example $(ENV_FILE); \
		echo "$(GREEN)‚úÖ Fichier .env cr√©√©! Veuillez l'√©diter avec vos valeurs.$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ Fichier .env existe d√©j√†.$(NC)"; \
	fi
	@echo "$(YELLOW)üê≥ D√©marrage des services Docker...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(YELLOW)‚è≥ Attente que les services soient pr√™ts...$(NC)"
	@sleep 10
	@echo "$(YELLOW)üóÑÔ∏è Ex√©cution des migrations de base de donn√©es...$(NC)"
	$(DOCKER_COMPOSE) exec web python manage.py migrate
	@echo "$(GREEN)üéâ Installation termin√©e!$(NC)"
	@echo ""
	@echo "$(YELLOW)üåê Acc√©dez √† votre application:$(NC)"
	@echo "   - Django Admin: http://localhost:8000/admin"
	@echo "   - Frontend: http://localhost:5173"
	@echo "   - Mailhog: http://localhost:8025"
	@echo ""
	@echo "$(YELLOW)üìù Prochaines √©tapes:$(NC)"
	@echo "   1. √âditez le fichier .env avec votre configuration"
	@echo "   2. Cr√©ez un superutilisateur: make superuser"
	@echo "   3. Cr√©ez des participants via le frontend"
	@echo "   4. V√©rifiez les emails dans Mailhog"

dev: ## D√©marrer l'environnement de d√©veloppement
	@echo "$(GREEN)üöÄ D√©marrage de l'environnement de d√©veloppement...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s!$(NC)"
	@echo "$(YELLOW)üåê Acc√©dez √†:$(NC)"
	@echo "   - Frontend: http://localhost:5173"
	@echo "   - Django: http://localhost:8000"
	@echo "   - Mailhog: http://localhost:8025"

prod: ## D√©marrer l'environnement de production
	@echo "$(GREEN)üöÄ D√©marrage de l'environnement de production...$(NC)"
	@if [ ! -f .env.prod ]; then \
		echo "$(YELLOW)üìù Cr√©ation du fichier .env.prod...$(NC)"; \
		cp env.prod.example .env.prod; \
		echo "$(YELLOW)‚ö†Ô∏è  Veuillez √©diter .env.prod avec vos valeurs de production.$(NC)"; \
		exit 1; \
	fi
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.prod.yml up -d
	@echo "$(GREEN)‚úÖ Services de production d√©marr√©s!$(NC)"

deploy: ## D√©ployer en production (script complet)
	@echo "$(GREEN)üöÄ D√©ploiement complet en production...$(NC)"
	./deploy.sh

setup: ## Configuration initiale (migrations + superuser)
	@echo "$(YELLOW)üóÑÔ∏è Ex√©cution des migrations...$(NC)"
	$(DOCKER_COMPOSE) exec web python manage.py migrate
	@echo "$(YELLOW)üë§ Cr√©ation d'un superutilisateur...$(NC)"
	$(DOCKER_COMPOSE) exec web python manage.py createsuperuser

migrate: ## Ex√©cuter les migrations
	@echo "$(YELLOW)üóÑÔ∏è Ex√©cution des migrations...$(NC)"
	$(DOCKER_COMPOSE) exec web python manage.py migrate
	@echo "$(GREEN)‚úÖ Migrations termin√©es!$(NC)"

shell: ## Ouvrir un shell Django
	@echo "$(GREEN)üêç Ouverture du shell Django...$(NC)"
	$(DOCKER_COMPOSE) exec web python manage.py shell

superuser: ## Cr√©er un superutilisateur
	@echo "$(YELLOW)üë§ Cr√©ation d'un superutilisateur...$(NC)"
	$(DOCKER_COMPOSE) exec web python manage.py createsuperuser

logs: ## Afficher les logs des services
	@echo "$(GREEN)üìã Affichage des logs...$(NC)"
	$(DOCKER_COMPOSE) logs -f

logs-web: ## Afficher les logs du service web
	@echo "$(GREEN)üìã Logs du service web...$(NC)"
	$(DOCKER_COMPOSE) logs -f web

logs-db: ## Afficher les logs de la base de donn√©es
	@echo "$(GREEN)üìã Logs de la base de donn√©es...$(NC)"
	$(DOCKER_COMPOSE) logs -f postgres

clean: ## Nettoyer les conteneurs et volumes
	@echo "$(RED)üßπ Nettoyage des conteneurs et volumes...$(NC)"
	$(DOCKER_COMPOSE) down -v
	@echo "$(GREEN)‚úÖ Nettoyage termin√©!$(NC)"

restart: ## Red√©marrer les services
	@echo "$(YELLOW)üîÑ Red√©marrage des services...$(NC)"
	$(DOCKER_COMPOSE) restart
	@echo "$(GREEN)‚úÖ Services red√©marr√©s!$(NC)"

stop: ## Arr√™ter les services
	@echo "$(YELLOW)‚èπÔ∏è Arr√™t des services...$(NC)"
	$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s!$(NC)"

test: ## Ex√©cuter les tests
	@echo "$(GREEN)üß™ Ex√©cution des tests...$(NC)"
	$(DOCKER_COMPOSE) exec web python manage.py test
	@echo "$(GREEN)‚úÖ Tests termin√©s!$(NC)"

status: ## Afficher le statut des services
	@echo "$(GREEN)üìä Statut des services:$(NC)"
	$(DOCKER_COMPOSE) ps

build: ## Construire les images Docker
	@echo "$(GREEN)üî® Construction des images Docker...$(NC)"
	$(DOCKER_COMPOSE) build
	@echo "$(GREEN)‚úÖ Images construites!$(NC)"

update: ## Mettre √† jour les d√©pendances
	@echo "$(GREEN)üì¶ Mise √† jour des d√©pendances...$(NC)"
	$(DOCKER_COMPOSE) exec web pip install -r requirements.txt
	$(DOCKER_COMPOSE) exec frontend npm install
	@echo "$(GREEN)‚úÖ D√©pendances mises √† jour!$(NC)"

backup: ## Sauvegarder la base de donn√©es
	@echo "$(GREEN)üíæ Sauvegarde de la base de donn√©es...$(NC)"
	$(DOCKER_COMPOSE) exec postgres pg_dump -U postgres postgres > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Sauvegarde termin√©e!$(NC)"

# Commandes de d√©veloppement rapide
dev-logs: logs-web ## Alias pour logs-web
dev-restart: restart ## Alias pour restart
dev-stop: stop ## Alias pour stop

# Commandes de production
prod-logs: ## Logs en mode production
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.prod.yml logs -f

prod-restart: ## Red√©marrage en mode production
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.prod.yml restart

prod-stop: ## Arr√™t en mode production
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.prod.yml down

prod-migrate: ## Ex√©cuter les migrations en production
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.prod.yml exec web python manage.py migrate

prod-collectstatic: ## Collecter les fichiers statiques en production
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.prod.yml exec web python manage.py collectstatic --noinput

prod-shell: ## Ouvrir un shell Django en production
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.prod.yml exec web python manage.py shell

prod-status: ## V√©rifier le statut des services de production
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.prod.yml ps
